{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","list.js","detail.js","index.js"],"names":["module","exports","App","state","param","className","src","logo","alt","to","React","Component","Boolean","window","location","hostname","match","List","props","list","console","log","fetch","then","result","json","resp","data","map","item","index","key","Prod_id","name","setState","this","Details","id","params","Description","routing","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,kC,2MC4B5BC,G,kBAtBb,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACXC,MAAO,GAHE,E,sEAOX,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,yCACa,sCAGb,kBAAC,IAAD,CAAMH,UAAU,WAAWI,GAAI,SAA/B,mB,GAhBQC,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCmBSC,E,YAhCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDf,MAAQ,CACXgB,KAAK,IAEPC,QAAQC,IAAI,EAAKH,OALA,E,iFAOA,IAAD,OAChBI,MAAM,qEACLC,MAAK,SAAAC,GAAM,OAAEA,EAAOC,UACpBF,MAAK,SAAAG,GACJ,IAAIC,EAAOD,EAAKC,KAAKC,KAAI,SAACC,EAAMC,GAC5B,OACE,yBAAKC,IAAKD,GACR,kBAAC,IAAD,CAAMzB,UAAU,OAAOI,GAAI,YAAaoB,EAAKG,SACzCH,EAAKI,UAKjB,EAAKC,SAAS,CAACf,KAAKQ,S,+BAItB,OACE,yBAAKtB,UAAU,WACV8B,KAAKhC,MAAMgB,U,GA3BHT,IAAMC,WC0BVyB,E,YA1Bb,WAAYlB,GAAQ,IAAD,8BACjB,4CAAMA,KACDf,MAAQ,CACXkC,GAAI,EAAKnB,MAAMF,MAAMsB,OAAOD,GAC5BlB,KAAK,IAEPC,QAAQC,IAAI,EAAKH,MAAMF,MAAMsB,OAAOD,IANnB,E,iFAQA,IAAD,OAClBf,MAAM,2FAA4Fa,KAAKhC,MAAMkC,IAC5Gd,MAAK,SAAAC,GAAM,OAAEA,EAAOC,UACpBF,MAAK,SAAAG,GACJ,IAAIC,EAAOD,EAAKC,KAAKY,YACrB,EAAKL,SAAS,CAACf,KAAKQ,S,+BAKpB,OACE,yBAAKtB,UAAU,WACZ8B,KAAKhC,MAAMgB,U,GArBET,IAAMC,WCMtB6B,EACF,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzC,IACjC,kBAAC,IAAD,CAAOwC,KAAK,QAAQC,UAAW1B,IAC/B,kBAAC,IAAD,CAAOyB,KAAK,eAAeC,UAAWP,MAK9CQ,IAASC,OAAOL,EAASM,SAASC,eAAe,SH8G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.5e4b23c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport { Link } from 'react-router-dom';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      param: 1\n   }\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Welcome to <b>Shogee</b>\n          </p>\n          \n          <Link className=\"App-link\" to={'/list'}>List Page</Link> \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './App.css';\n\nclass List extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list:'',\n    }\n    console.log(this.props);\n };\n componentDidMount(){\n    fetch('http://10.216.2.82/shogee-master/shogee-master/api.php?route=demo')\n    .then(result=>result.json())\n    .then(resp=> {\n      let data = resp.data.map((item, index) => {\n          return(\n            <div key={index}>\n              <Link className=\"list\" to={'/details/'+ item.Prod_id} >\n                 {item.name}\n              </Link>\n            </div>\n          )\n      })\n      this.setState({list:data});  \n    });\n }\n render(){\n    return (\n      <div className=\"listing\">\n          {this.state.list}\n      </div>\n    );\n  }\n}\n\nexport default List;\n","import React from 'react';\nimport './App.css';\n\nclass Details extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.match.params.id,\n      list:'',\n    }\n    console.log(this.props.match.params.id);\n };\n componentDidMount(){\n  fetch('http://10.216.2.82/shogee-master/shogee-master/api.php?route=demo/productDescription&id='+ this.state.id)\n  .then(result=>result.json())\n  .then(resp=> {\n    let data = resp.data.Description; \n    this.setState({list:data});  \n  });\n}\n render(){\n  \n    return (\n      <div className=\"details\">\n        {this.state.list}\n      </div>\n    );\n  }\n}\n\nexport default Details;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom';\nimport List from './list';\nimport Details from './detail';\n\nconst routing = (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/list\" component={List} />\n        <Route path=\"/details/:id\" component={Details} />\n      </div>\n    </Router>\n  )\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}